/**
 * Chart.js
 * http://chartjs.org/
 *
 * Copyright 2013 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */

window.Chart = function (s) {
    function w(a, c, b) {
        a = B((a - c.graphMin) / (c.steps * c.stepValue), 1, 0);
        return b * c.steps * a
    }

    function y(a, c, b, d) {
        function h() {
            k += g;
            var l = a.animation ? B(f(k), null, 0) : 1;
            d.clearRect(0, 0, m, t);
            a.scaleOverlay ? (b(l), c()) : (c(), b(l));
            if (1 >= k)E(h); else if ("function" == typeof a.onAnimationComplete)a.onAnimationComplete()
        }

        var g = a.animation ? 1 / B(a.animationSteps, Number.MAX_VALUE, 1) : 1, f = C[a.animationEasing], k = a.animation ? 0 : 1;
        "function" !== typeof c && (c = function () {
        });
        E(h)
    }

    function D(a, c, b, d, h, g) {
        var f;
        a = Math.floor(Math.log(d - h) / Math.LN10);
        h = Math.floor(h / (1 * Math.pow(10, a))) * Math.pow(10, a);
        d = Math.ceil(d / (1 * Math.pow(10, a))) * Math.pow(10, a) - h;
        a = Math.pow(10, a);
        for (f = Math.round(d / a); f < b || f > c;)a = f < b ? a / 2 : 2 * a, f = Math.round(d / a);
        c = [];
        z(g, c, f, h, a);
        return{steps: f, stepValue: a, graphMin: h, labels: c}
    }

    function z(a, c, b, d, h) {
        if (a)for (var g = 1; g < b + 1; g++)c.push(F(a, {value: (d + h * g).toFixed(0 != h % 1 ? h.toString().split(".")[1].length : 0)}))
    }

    function B(a, c, b) {
        return!isNaN(parseFloat(c)) && isFinite(c) && a > c ? c : !isNaN(parseFloat(b)) &&
            isFinite(b) && a < b ? b : a
    }

    function v(a, c) {
        var b = {}, d;
        for (d in a)b[d] = a[d];
        for (d in c)b[d] = c[d];
        return b
    }

    function F(a, c) {
        var b = !/\W/.test(a) ? G[a] = G[a] || F(document.getElementById(a).innerHTML) : new Function("obj", "var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('" + a.replace(/[\r\t\n]/g, " ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'") + "');}return p.join('');");
        return c ?
            b(c) : b
    }

    var q = this, C = {linear: function (a) {
        return a
    }, easeInQuad: function (a) {
        return a * a
    }, easeOutQuad: function (a) {
        return-1 * a * (a - 2)
    }, easeInOutQuad: function (a) {
        return 1 > (a /= 0.5) ? 0.5 * a * a : -0.5 * (--a * (a - 2) - 1)
    }, easeInCubic: function (a) {
        return a * a * a
    }, easeOutCubic: function (a) {
        return 1 * ((a = a / 1 - 1) * a * a + 1)
    }, easeInOutCubic: function (a) {
        return 1 > (a /= 0.5) ? 0.5 * a * a * a : 0.5 * ((a -= 2) * a * a + 2)
    }, easeInQuart: function (a) {
        return a * a * a * a
    }, easeOutQuart: function (a) {
        return-1 * ((a = a / 1 - 1) * a * a * a - 1)
    }, easeInOutQuart: function (a) {
        return 1 > (a /= 0.5) ?
            0.5 * a * a * a * a : -0.5 * ((a -= 2) * a * a * a - 2)
    }, easeInQuint: function (a) {
        return 1 * (a /= 1) * a * a * a * a
    }, easeOutQuint: function (a) {
        return 1 * ((a = a / 1 - 1) * a * a * a * a + 1)
    }, easeInOutQuint: function (a) {
        return 1 > (a /= 0.5) ? 0.5 * a * a * a * a * a : 0.5 * ((a -= 2) * a * a * a * a + 2)
    }, easeInSine: function (a) {
        return-1 * Math.cos(a / 1 * (Math.PI / 2)) + 1
    }, easeOutSine: function (a) {
        return 1 * Math.sin(a / 1 * (Math.PI / 2))
    }, easeInOutSine: function (a) {
        return-0.5 * (Math.cos(Math.PI * a / 1) - 1)
    }, easeInExpo: function (a) {
        return 0 == a ? 1 : 1 * Math.pow(2, 10 * (a / 1 - 1))
    }, easeOutExpo: function (a) {
        return 1 ==
            a ? 1 : 1 * (-Math.pow(2, -10 * a / 1) + 1)
    }, easeInOutExpo: function (a) {
        return 0 == a ? 0 : 1 == a ? 1 : 1 > (a /= 0.5) ? 0.5 * Math.pow(2, 10 * (a - 1)) : 0.5 * (-Math.pow(2, -10 * --a) + 2)
    }, easeInCirc: function (a) {
        return 1 <= a ? a : -1 * (Math.sqrt(1 - (a /= 1) * a) - 1)
    }, easeOutCirc: function (a) {
        return 1 * Math.sqrt(1 - (a = a / 1 - 1) * a)
    }, easeInOutCirc: function (a) {
        return 1 > (a /= 0.5) ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
    }, easeInElastic: function (a) {
        var c = 1.70158, b = 0, d = 1;
        if (0 == a)return 0;
        if (1 == (a /= 1))return 1;
        b || (b = 0.3);
        d < Math.abs(1) ? (d = 1, c = b / 4) : c = b / (2 *
            Math.PI) * Math.asin(1 / d);
        return-(d * Math.pow(2, 10 * (a -= 1)) * Math.sin((1 * a - c) * 2 * Math.PI / b))
    }, easeOutElastic: function (a) {
        var c = 1.70158, b = 0, d = 1;
        if (0 == a)return 0;
        if (1 == (a /= 1))return 1;
        b || (b = 0.3);
        d < Math.abs(1) ? (d = 1, c = b / 4) : c = b / (2 * Math.PI) * Math.asin(1 / d);
        return d * Math.pow(2, -10 * a) * Math.sin((1 * a - c) * 2 * Math.PI / b) + 1
    }, easeInOutElastic: function (a) {
        var c = 1.70158, b = 0, d = 1;
        if (0 == a)return 0;
        if (2 == (a /= 0.5))return 1;
        b || (b = 1 * 0.3 * 1.5);
        d < Math.abs(1) ? (d = 1, c = b / 4) : c = b / (2 * Math.PI) * Math.asin(1 / d);
        return 1 > a ? -0.5 * d * Math.pow(2, 10 *
            (a -= 1)) * Math.sin((1 * a - c) * 2 * Math.PI / b) : 0.5 * d * Math.pow(2, -10 * (a -= 1)) * Math.sin((1 * a - c) * 2 * Math.PI / b) + 1
    }, easeInBack: function (a) {
        return 1 * (a /= 1) * a * (2.70158 * a - 1.70158)
    }, easeOutBack: function (a) {
        return 1 * ((a = a / 1 - 1) * a * (2.70158 * a + 1.70158) + 1)
    }, easeInOutBack: function (a) {
        var c = 1.70158;
        return 1 > (a /= 0.5) ? 0.5 * a * a * (((c *= 1.525) + 1) * a - c) : 0.5 * ((a -= 2) * a * (((c *= 1.525) + 1) * a + c) + 2)
    }, easeInBounce: function (a) {
        return 1 - C.easeOutBounce(1 - a)
    }, easeOutBounce: function (a) {
        return(a /= 1) < 1 / 2.75 ? 1 * 7.5625 * a * a : a < 2 / 2.75 ? 1 * (7.5625 * (a -= 1.5 / 2.75) *
            a + 0.75) : a < 2.5 / 2.75 ? 1 * (7.5625 * (a -= 2.25 / 2.75) * a + 0.9375) : 1 * (7.5625 * (a -= 2.625 / 2.75) * a + 0.984375)
    }, easeInOutBounce: function (a) {
        return 0.5 > a ? 0.5 * C.easeInBounce(2 * a) : 0.5 * C.easeOutBounce(2 * a - 1) + 0.5
    }}, m = s.canvas.width, t = s.canvas.height;
    window.devicePixelRatio && (s.canvas.style.width = m + "px", s.canvas.style.height = t + "px", s.canvas.height = t * window.devicePixelRatio, s.canvas.width = m * window.devicePixelRatio, s.scale(window.devicePixelRatio, window.devicePixelRatio));
    this.PolarArea = function (a, c) {
        q.PolarArea.defaults = {scaleOverlay: !0,
            scaleOverride: !1, scaleSteps: null, scaleStepWidth: null, scaleStartValue: null, scaleShowLine: !0, scaleLineColor: "rgba(0,0,0,.1)", scaleLineWidth: 1, scaleShowLabels: !0, scaleLabel: "<%=value%>", scaleFontFamily: "'Arial'", scaleFontSize: 12, scaleFontStyle: "normal", scaleFontColor: "#666", scaleShowLabelBackdrop: !0, scaleBackdropColor: "rgba(255,255,255,0.75)", scaleBackdropPaddingY: 2, scaleBackdropPaddingX: 2, segmentShowStroke: !0, segmentStrokeColor: "#fff", segmentStrokeWidth: 2, animation: !0, animationSteps: 100, animationEasing: "easeOutBounce",
            animateRotate: !0, animateScale: !1, onAnimationComplete: null};
        var b = c ? v(q.PolarArea.defaults, c) : q.PolarArea.defaults;
        return new H(a, b, s)
    };
    this.Radar = function (a, c) {
        q.Radar.defaults = {scaleOverlay: !1, scaleOverride: !1, scaleSteps: null, scaleStepWidth: null, scaleStartValue: null, scaleShowLine: !0, scaleLineColor: "rgba(0,0,0,.1)", scaleLineWidth: 1, scaleShowLabels: !1, scaleLabel: "<%=value%>", scaleFontFamily: "'Arial'", scaleFontSize: 12, scaleFontStyle: "normal", scaleFontColor: "#666", scaleShowLabelBackdrop: !0, scaleBackdropColor: "rgba(255,255,255,0.75)",
            scaleBackdropPaddingY: 2, scaleBackdropPaddingX: 2, angleShowLineOut: !0, angleLineColor: "rgba(0,0,0,.1)", angleLineWidth: 1, pointLabelFontFamily: "'Arial'", pointLabelFontStyle: "normal", pointLabelFontSize: 12, pointLabelFontColor: "#666", pointDot: !0, pointDotRadius: 3, pointDotStrokeWidth: 1, datasetStroke: !0, datasetStrokeWidth: 2, datasetFill: !0, animation: !0, animationSteps: 60, animationEasing: "easeOutQuart", onAnimationComplete: null};
        var b = c ? v(q.Radar.defaults, c) : q.Radar.defaults;
        return new I(a, b, s)
    };
    this.Pie = function (a, c) {
        q.Pie.defaults = {segmentShowStroke: !0, segmentStrokeColor: "#fff", segmentStrokeWidth: 2, animation: !0, animationSteps: 100, animationEasing: "easeOutBounce", animateRotate: !0, animateScale: !1, onAnimationComplete: null};
        var b = c ? v(q.Pie.defaults, c) : q.Pie.defaults;
        return new J(a, b, s)
    };
    this.Doughnut = function (a, c) {
        q.Doughnut.defaults = {segmentShowStroke: !0, segmentStrokeColor: "#fff", segmentStrokeWidth: 2, percentageInnerCutout: 50, animation: !0, animationSteps: 100, animationEasing: "easeOutBounce", animateRotate: !0, animateScale: !1,
            onAnimationComplete: null};
        var b = c ? v(q.Doughnut.defaults, c) : q.Doughnut.defaults;
        return new K(a, b, s)
    };
    this.Line = function (a, c) {
        q.Line.defaults = {scaleOverlay: !1, scaleOverride: !1, scaleSteps: null, scaleStepWidth: null, scaleStartValue: null, scaleLineColor: "rgba(0,0,0,.1)", scaleLineWidth: 1, scaleShowLabels: !0, scaleLabel: "<%=value%>", scaleFontFamily: "'Arial'", scaleFontSize: 12, scaleFontStyle: "normal", scaleFontColor: "#666", scaleShowGridLines: !0, scaleGridLineColor: "rgba(0,0,0,.05)", scaleGridLineWidth: 1, bezierCurve: !0,
            pointDot: !0, pointDotRadius: 4, pointDotStrokeWidth: 2, datasetStroke: !0, datasetStrokeWidth: 2, datasetFill: !0, animation: !0, animationSteps: 60, animationEasing: "easeOutQuart", onAnimationComplete: null};
        var b = c ? v(q.Line.defaults, c) : q.Line.defaults;
        return new L(a, b, s)
    };
    this.Bar = function (a, c) {
        q.Bar.defaults = {scaleOverlay: !1, scaleOverride: !1, scaleSteps: null, scaleStepWidth: null, scaleStartValue: null, scaleLineColor: "rgba(0,0,0,.1)", scaleLineWidth: 1, scaleShowLabels: !0, scaleLabel: "<%=value%>", scaleFontFamily: "'Arial'",
            scaleFontSize: 12, scaleFontStyle: "normal", scaleFontColor: "#666", scaleShowGridLines: !0, scaleGridLineColor: "rgba(0,0,0,.05)", scaleGridLineWidth: 1, barShowStroke: !0, barStrokeWidth: 2, barValueSpacing: 5, barDatasetSpacing: 1, animation: !0, animationSteps: 60, animationEasing: "easeOutQuart", onAnimationComplete: null, stacked: !1};
        var b = c ? v(q.Bar.defaults, c) : q.Bar.defaults;
        return new M(a, b, s)
    };
    var H = function (a, c, b) {
        var d, h, g, f, k, l, u;
        d = Math.min.apply(Math, [m, t]) / 2;
        d -= Math.max.apply(Math, [0.5 * c.scaleFontSize, 0.5 * c.scaleLineWidth]);
        f = 2 * c.scaleFontSize;
        c.scaleShowLabelBackdrop && (f += 2 * c.scaleBackdropPaddingY, d -= 1.5 * c.scaleBackdropPaddingY);
        k = d;
        f = f ? f : 5;
        l = function () {
            for (var b = Number.MIN_VALUE, c = Number.MAX_VALUE, d = 0; d < a.length; d++)a[d].value > b && (b = a[d].value), a[d].value < c && (c = a[d].value);
            return{maxValue: b, minValue: c, maxSteps: Math.floor(k / (0.66 * f)), minSteps: Math.floor(0.5 * (k / f))}
        }();
        u = c.scaleShowLabels ? c.scaleLabel : null;
        c.scaleOverride ? (g = {steps: c.scaleSteps, stepValue: c.scaleStepWidth, graphMin: c.scaleStartValue, labels: []}, z(u, g.labels,
            g.steps, c.scaleStartValue, c.scaleStepWidth)) : g = D(k, l.maxSteps, l.minSteps, l.maxValue, l.minValue, u);
        h = d / g.steps;
        y(c, function () {
            for (var a = 0; a < g.steps; a++)if (c.scaleShowLine && (b.beginPath(), b.arc(m / 2, t / 2, h * (a + 1), 0, 2 * Math.PI, !0), b.strokeStyle = c.scaleLineColor, b.lineWidth = c.scaleLineWidth, b.stroke()), c.scaleShowLabels) {
                b.textAlign = "center";
                b.font = c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily;
                var d = g.labels[a];
                if (c.scaleShowLabelBackdrop) {
                    var A = b.measureText(d).width;
                    b.fillStyle = c.scaleBackdropColor;
                    b.beginPath();
                    b.rect(Math.round(m / 2 - A / 2 - c.scaleBackdropPaddingX), Math.round(t / 2 - h * (a + 1) - 0.5 * c.scaleFontSize - c.scaleBackdropPaddingY), Math.round(A + 2 * c.scaleBackdropPaddingX), Math.round(c.scaleFontSize + 2 * c.scaleBackdropPaddingY));
                    b.fill()
                }
                b.textBaseline = "middle";
                b.fillStyle = c.scaleFontColor;
                b.fillText(d, m / 2, t / 2 - h * (a + 1))
            }
        }, function (d) {
            var e = -Math.PI / 2, A = 2 * Math.PI / a.length, n = 1, f = 1;
            c.animation && (c.animateScale && (n = d), c.animateRotate && (f = d));
            for (d = 0; d < a.length; d++)b.beginPath(), b.arc(m / 2, t / 2, n * w(a[d].value,
                g, h), e, e + f * A, !1), b.lineTo(m / 2, t / 2), b.closePath(), b.fillStyle = a[d].color, b.fill(), c.segmentShowStroke && (b.strokeStyle = c.segmentStrokeColor, b.lineWidth = c.segmentStrokeWidth, b.stroke()), e += f * A
        }, b)
    }, I = function (a, c, b) {
        var d, h, g, f, k, l, u;
        a.labels || (a.labels = []);
        (function () {
            d = Math.min.apply(Math, [m, t]) / 2;
            f = 2 * c.scaleFontSize;
            for (var g = 0, e = 0; e < a.labels.length; e++) {
                b.font = c.pointLabelFontStyle + " " + c.pointLabelFontSize + "px " + c.pointLabelFontFamily;
                var h = b.measureText(a.labels[e]).width;
                h > g && (g = h)
            }
            d -= Math.max.apply(Math,
                [g, 1.5 * (c.pointLabelFontSize / 2)]);
            d -= c.pointLabelFontSize;
            k = d = B(d, null, 0);
            f = f ? f : 5
        })();
        l = function () {
            for (var b = Number.MIN_VALUE, c = Number.MAX_VALUE, d = 0; d < a.datasets.length; d++)for (var g = 0; g < a.datasets[d].data.length; g++)a.datasets[d].data[g] > b && (b = a.datasets[d].data[g]), a.datasets[d].data[g] < c && (c = a.datasets[d].data[g]);
            return{maxValue: b, minValue: c, maxSteps: Math.floor(k / (0.66 * f)), minSteps: Math.floor(0.5 * (k / f))}
        }();
        u = c.scaleShowLabels ? c.scaleLabel : null;
        c.scaleOverride ? (g = {steps: c.scaleSteps, stepValue: c.scaleStepWidth,
            graphMin: c.scaleStartValue, labels: []}, z(u, g.labels, g.steps, c.scaleStartValue, c.scaleStepWidth)) : g = D(k, l.maxSteps, l.minSteps, l.maxValue, l.minValue, u);
        h = d / g.steps;
        y(c, function () {
            var f = 2 * Math.PI / a.datasets[0].data.length;
            b.save();
            b.translate(m / 2, t / 2);
            if (c.angleShowLineOut) {
                b.strokeStyle = c.angleLineColor;
                b.lineWidth = c.angleLineWidth;
                for (var e = 0; e < a.datasets[0].data.length; e++)b.rotate(f), b.beginPath(), b.moveTo(0, 0), b.lineTo(0, -d), b.stroke()
            }
            for (e = 0; e < g.steps; e++) {
                b.beginPath();
                if (c.scaleShowLine) {
                    b.strokeStyle =
                        c.scaleLineColor;
                    b.lineWidth = c.scaleLineWidth;
                    b.moveTo(0, -h * (e + 1));
                    for (var k = 0; k < a.datasets[0].data.length; k++)b.rotate(f), b.lineTo(0, -h * (e + 1));
                    b.closePath();
                    b.stroke()
                }
                c.scaleShowLabels && (b.textAlign = "center", b.font = c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily, b.textBaseline = "middle", c.scaleShowLabelBackdrop && (k = b.measureText(g.labels[e]).width, b.fillStyle = c.scaleBackdropColor, b.beginPath(), b.rect(Math.round(-k / 2 - c.scaleBackdropPaddingX), Math.round(-h * (e + 1) - 0.5 * c.scaleFontSize - c.scaleBackdropPaddingY),
                    Math.round(k + 2 * c.scaleBackdropPaddingX), Math.round(c.scaleFontSize + 2 * c.scaleBackdropPaddingY)), b.fill()), b.fillStyle = c.scaleFontColor, b.fillText(g.labels[e], 0, -h * (e + 1)))
            }
            for (e = 0; e < a.labels.length; e++) {
                b.font = c.pointLabelFontStyle + " " + c.pointLabelFontSize + "px " + c.pointLabelFontFamily;
                b.fillStyle = c.pointLabelFontColor;
                var k = Math.sin(f * e) * (d + c.pointLabelFontSize), n = Math.cos(f * e) * (d + c.pointLabelFontSize);
                b.textAlign = f * e == Math.PI || 0 == f * e ? "center" : f * e > Math.PI ? "right" : "left";
                b.textBaseline = "middle";
                b.fillText(a.labels[e],
                    k, -n)
            }
            b.restore()
        }, function (d) {
            var e = 2 * Math.PI / a.datasets[0].data.length;
            b.save();
            b.translate(m / 2, t / 2);
            for (var f = 0; f < a.datasets.length; f++) {
                b.beginPath();
                b.moveTo(0, d * -1 * w(a.datasets[f].data[0], g, h));
                for (var k = 1; k < a.datasets[f].data.length; k++)b.rotate(e), b.lineTo(0, d * -1 * w(a.datasets[f].data[k], g, h));
                b.closePath();
                b.fillStyle = a.datasets[f].fillColor;
                b.strokeStyle = a.datasets[f].strokeColor;
                b.lineWidth = c.datasetStrokeWidth;
                b.fill();
                b.stroke();
                if (c.pointDot) {
                    b.fillStyle = a.datasets[f].pointColor;
                    b.strokeStyle =
                        a.datasets[f].pointStrokeColor;
                    b.lineWidth = c.pointDotStrokeWidth;
                    for (k = 0; k < a.datasets[f].data.length; k++)b.rotate(e), b.beginPath(), b.arc(0, d * -1 * w(a.datasets[f].data[k], g, h), c.pointDotRadius, 2 * Math.PI, !1), b.fill(), b.stroke()
                }
                b.rotate(e)
            }
            b.restore()
        }, b)
    }, J = function (a, c, b) {
        for (var d = 0, h = Math.min.apply(Math, [t / 2, m / 2]) - 5, g = 0; g < a.length; g++)d += a[g].value;
        y(c, null, function (f) {
            var g = -Math.PI / 2, l = 1, u = 1;
            c.animation && (c.animateScale && (l = f), c.animateRotate && (u = f));
            for (f = 0; f < a.length; f++) {
                var r = u * a[f].value / d *
                    2 * Math.PI;
                b.beginPath();
                b.arc(m / 2, t / 2, l * h, g, g + r);
                b.lineTo(m / 2, t / 2);
                b.closePath();
                b.fillStyle = a[f].color;
                b.fill();
                c.segmentShowStroke && (b.lineWidth = c.segmentStrokeWidth, b.strokeStyle = c.segmentStrokeColor, b.stroke());
                g += r
            }
        }, b)
    }, K = function (a, c, b) {
        for (var d = 0, h = Math.min.apply(Math, [t / 2, m / 2]) - 5, g = h * (c.percentageInnerCutout / 100), f = 0; f < a.length; f++)d += a[f].value;
        y(c, null, function (f) {
            var l = -Math.PI / 2, u = 1, r = 1;
            c.animation && (c.animateScale && (u = f), c.animateRotate && (r = f));
            for (f = 0; f < a.length; f++) {
                var e = r * a[f].value /
                    d * 2 * Math.PI;
                b.beginPath();
                b.arc(m / 2, t / 2, u * h, l, l + e, !1);
                b.arc(m / 2, t / 2, u * g, l + e, l, !0);
                b.closePath();
                b.fillStyle = a[f].color;
                b.fill();
                c.segmentShowStroke && (b.lineWidth = c.segmentStrokeWidth, b.strokeStyle = c.segmentStrokeColor, b.stroke());
                l += e
            }
        }, b)
    }, L = function (a, c, b) {
        var d, h, g, f, k, l, u, r, e, q, n, p, s = 0;
        (function () {
            d = t;
            b.font = c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily;
            e = 1;
            for (var g = 0; g < a.labels.length; g++) {
                var h = b.measureText(a.labels[g]).width;
                e = h > e ? h : e
            }
            m / a.labels.length < e ? (s = 45, m / a.labels.length <
                Math.cos(s) * e ? (s = 90, d -= e) : d -= Math.sin(s) * e) : d -= c.scaleFontSize;
            d -= 5;
            f = c.scaleFontSize;
            k = d -= f
        })();
        l = function () {
            for (var b = Number.MIN_VALUE, c = Number.MAX_VALUE, d = 0; d < a.datasets.length; d++)for (var g = 0; g < a.datasets[d].data.length; g++)a.datasets[d].data[g] > b && (b = a.datasets[d].data[g]), a.datasets[d].data[g] < c && (c = a.datasets[d].data[g]);
            return{maxValue: b, minValue: c, maxSteps: Math.floor(k / (0.66 * f)), minSteps: Math.floor(0.5 * (k / f))}
        }();
        u = c.scaleShowLabels ? c.scaleLabel : "";
        c.scaleOverride ? (g = {steps: c.scaleSteps,
            stepValue: c.scaleStepWidth, graphMin: c.scaleStartValue, labels: []}, z(u, g.labels, g.steps, c.scaleStartValue, c.scaleStepWidth)) : g = D(k, l.maxSteps, l.minSteps, l.maxValue, l.minValue, u);
        h = Math.floor(k / g.steps);
        (function () {
            var d = 1;
            if (c.scaleShowLabels) {
                b.font = c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily;
                for (var f = 0; f < g.labels.length; f++)var h = b.measureText(g.labels[f]).width, d = h > d ? h : d;
                d += 10
            }
            q = m - d - e;
            r = Math.floor(q / (a.labels.length - 1));
            n = m - e / 2 - q;
            p = k + c.scaleFontSize / 2
        })();
        y(c, function () {
                b.lineWidth =
                    c.scaleLineWidth;
                b.strokeStyle = c.scaleLineColor;
                b.beginPath();
                b.moveTo(m - e / 2 + 5, p);
                b.lineTo(m - e / 2 - q - 5, p);
                b.stroke();
                0 < s ? (b.save(), b.textAlign = "right") : b.textAlign = "center";
                b.fillStyle = c.scaleFontColor;
                for (var d = 0; d < a.labels.length; d++)b.save(), 0 < s ? (b.translate(n + d * r, p + c.scaleFontSize), b.rotate(-(s * (Math.PI / 180))), b.fillText(a.labels[d], 0, 0), b.restore()) : b.fillText(a.labels[d], n + d * r, p + c.scaleFontSize + 3), b.beginPath(), b.moveTo(n + d * r, p + 3), c.scaleShowGridLines && 0 < d ? (b.lineWidth = c.scaleGridLineWidth, b.strokeStyle =
                    c.scaleGridLineColor, b.lineTo(n + d * r, 5)) : b.lineTo(n + d * r, p + 3), b.stroke();
                b.lineWidth = c.scaleLineWidth;
                b.strokeStyle = c.scaleLineColor;
                b.beginPath();
                b.moveTo(n, p + 5);
                b.lineTo(n, 5);
                b.stroke();
                b.textAlign = "right";
                b.textBaseline = "middle";
                for (d = 0; d < g.steps; d++)b.beginPath(), b.moveTo(n - 3, p - (d + 1) * h), c.scaleShowGridLines ? (b.lineWidth = c.scaleGridLineWidth, b.strokeStyle = c.scaleGridLineColor, b.lineTo(n + q + 5, p - (d + 1) * h)) : b.lineTo(n - 0.5, p - (d + 1) * h), b.stroke(), c.scaleShowLabels && b.fillText(g.labels[d], n - 8, p - (d + 1) * h)
            },
            function (d) {
                function f(b, c) {
                    return p - d * w(a.datasets[b].data[c], g, h)
                }

                for (var e = 0; e < a.datasets.length; e++) {
                    b.strokeStyle = a.datasets[e].strokeColor;
                    b.lineWidth = c.datasetStrokeWidth;
                    b.beginPath();
                    b.moveTo(n, p - d * w(a.datasets[e].data[0], g, h));
                    for (var k = 1; k < a.datasets[e].data.length; k++)c.bezierCurve ? b.bezierCurveTo(n + r * (k - 0.5), f(e, k - 1), n + r * (k - 0.5), f(e, k), n + r * k, f(e, k)) : b.lineTo(n + r * k, f(e, k));
                    b.stroke();
                    c.datasetFill ? (b.lineTo(n + r * (a.datasets[e].data.length - 1), p), b.lineTo(n, p), b.closePath(), b.fillStyle = a.datasets[e].fillColor,
                        b.fill()) : b.closePath();
                    if (c.pointDot) {
                        b.fillStyle = a.datasets[e].pointColor;
                        b.strokeStyle = a.datasets[e].pointStrokeColor;
                        b.lineWidth = c.pointDotStrokeWidth;
                        for (k = 0; k < a.datasets[e].data.length; k++)b.beginPath(), b.arc(n + r * k, p - d * w(a.datasets[e].data[k], g, h), c.pointDotRadius, 0, 2 * Math.PI, !0), b.fill(), b.stroke()
                    }
                }
            }, b)
    }, M = function (a, c, b) {
        var d, h, g, f, k, l, q, r, e, s, n, p, v, x = 0;
        (function () {
            d = t;
            b.font = c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily;
            e = 1;
            for (var g = 0; g < a.labels.length; g++) {
                var h = b.measureText(a.labels[g]).width;
                e = h > e ? h : e
            }
            m / a.labels.length < e ? (x = 45, m / a.labels.length < Math.cos(x) * e ? (x = 90, d -= e) : d -= Math.sin(x) * e) : d -= c.scaleFontSize;
            d -= 5;
            f = c.scaleFontSize;
            k = d -= f
        })();
        l = function () {
            var b = Number.MIN_VALUE, d = Number.MAX_VALUE;
            if (c.stacked) {
                for (var g = [], e = 0; e < a.labels.length; e++)g[e] = 0;
                for (var h = 0; h < a.datasets.length; h++)for (e = 0; e < a.datasets[h].data.length; e++)g[e] += a.datasets[h].data[e];
                for (e = 0; e < a.labels.length; e++)g[e] > b && (b = g[e]), g[e] < d && (d = g[e])
            } else for (h = 0; h < a.datasets.length; h++)for (e = 0; e < a.datasets[h].data.length; e++)a.datasets[h].data[e] >
                b && (b = a.datasets[h].data[e]), a.datasets[h].data[e] < d && (d = a.datasets[h].data[e]);
            return{maxValue: b, minValue: c.stacked ? 0 : d, maxSteps: Math.floor(k / (0.66 * f)), minSteps: Math.floor(0.5 * (k / f))}
        }();
        q = c.scaleShowLabels ? c.scaleLabel : "";
        c.scaleOverride ? (g = {steps: c.scaleSteps, stepValue: c.scaleStepWidth, graphMin: c.scaleStartValue, labels: []}, z(q, g.labels, g.steps, c.scaleStartValue, c.scaleStepWidth)) : g = D(k, l.maxSteps, l.minSteps, l.maxValue, l.minValue, q);
        h = Math.floor(k / g.steps);
        (function () {
            var d = 1;
            if (c.scaleShowLabels) {
                b.font =
                    c.scaleFontStyle + " " + c.scaleFontSize + "px " + c.scaleFontFamily;
                for (var f = 0; f < g.labels.length; f++)var h = b.measureText(g.labels[f]).width, d = h > d ? h : d;
                d += 10
            }
            s = m - d - e;
            r = Math.floor(s / a.labels.length);
            v = c.stacked ? r - 2 * c.scaleGridLineWidth - 2 * c.barValueSpacing : (r - 2 * c.scaleGridLineWidth - 2 * c.barValueSpacing - (c.barDatasetSpacing * a.datasets.length - 1) - (c.barStrokeWidth / 2 * a.datasets.length - 1)) / a.datasets.length;
            n = m - e / 2 - s;
            p = k + c.scaleFontSize / 2
        })();
        y(c, function () {
            b.lineWidth = c.scaleLineWidth;
            b.strokeStyle = c.scaleLineColor;
            b.beginPath();
            b.moveTo(m - e / 2 + 5, p);
            b.lineTo(m - e / 2 - s - 5, p);
            b.stroke();
            0 < x ? (b.save(), b.textAlign = "right") : b.textAlign = "center";
            b.fillStyle = c.scaleFontColor;
            for (var d = 0; d < a.labels.length; d++)b.save(), 0 < x ? (b.translate(n + d * r, p + c.scaleFontSize), b.rotate(-(x * (Math.PI / 180))), b.fillText(a.labels[d], 0, 0), b.restore()) : b.fillText(a.labels[d], n + d * r + r / 2, p + c.scaleFontSize + 3), b.beginPath(), b.moveTo(n + (d + 1) * r, p + 3), b.lineWidth = c.scaleGridLineWidth, b.strokeStyle = c.scaleGridLineColor, b.lineTo(n + (d + 1) * r, 5), b.stroke();
            b.lineWidth =
                c.scaleLineWidth;
            b.strokeStyle = c.scaleLineColor;
            b.beginPath();
            b.moveTo(n, p + 5);
            b.lineTo(n, 5);
            b.stroke();
            b.textAlign = "right";
            b.textBaseline = "middle";
            for (d = 0; d < g.steps; d++)b.beginPath(), b.moveTo(n - 3, p - (d + 1) * h), c.scaleShowGridLines ? (b.lineWidth = c.scaleGridLineWidth, b.strokeStyle = c.scaleGridLineColor, b.lineTo(n + s + 5, p - (d + 1) * h)) : b.lineTo(n - 0.5, p - (d + 1) * h), b.stroke(), c.scaleShowLabels && b.fillText(g.labels[d], n - 8, p - (d + 1) * h)
        }, function (d) {
            b.lineWidth = c.barStrokeWidth;
            for (var e = 0, f = [], k = 0; k < a.labels.length; k++)f[k] =
                0;
            for (var l = 0, m = 0; m < a.datasets.length; m++) {
                b.fillStyle = a.datasets[m].fillColor;
                b.strokeStyle = a.datasets[m].strokeColor;
                for (var k = 0; k < a.datasets[m].data.length; k++)l = d * w(a.datasets[m].data[k], g, h), e = n + c.barValueSpacing + r * k + c.scaleGridLineWidth, c.stacked || (e += v * m + c.barDatasetSpacing * m + c.barStrokeWidth * m), b.beginPath(), b.moveTo(e, p - f[k]), b.lineTo(e, p - f[k] - l + c.barStrokeWidth / 2), b.lineTo(e + v, p - f[k] - l + c.barStrokeWidth / 2), b.lineTo(e + v, p - f[k]), c.barShowStroke && b.stroke(), b.closePath(), b.fill(), c.stacked &&
                    (f[k] += l)
            }
        }, b)
    }, E = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) {
            window.setTimeout(a, 1E3 / 60)
        }
    }(), G = {}
};


var barDefaults = {

    stacked: true,

    //String - Scale label font declaration for the scale label
    scaleFontFamily: "'Istok Web'",

    //Number - Scale label font size in pixels
    scaleFontSize: 12,

    //String - Scale label font colour
    scaleFontColor: "#666",


    //String - Colour of the grid lines
    scaleGridLineColor: "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth: 1,

    //Boolean - If there is a stroke on each bar
    barShowStroke: false,

    //Number - Pixel width of the bar stroke
    barStrokeWidth: 0,

    //Number - Spacing between each of the X value sets
    barValueSpacing: 5,

    //Number - Spacing between data sets within X values
    barDatasetSpacing: 5,

    //Function - Fires when the animation is complete
    onAnimationComplete: null

}